多表
    多表查询: 从多个表中取出对应的数据 组合成一张新表展示
    笛卡尔积查询(理论): 交叉查询 , 两个表数据的乘积
        语法: select * from A表名 , B表

基本语法:
    增加外键:
        alter table 从表名 add foreign key (从表的外键字段) references 主表名(主表字段);
        alter table 表名 add [constraint] [外键约束的名称]  foreign key (从表中的字段名称)  references 主表 (主键)
    外键约束:保证数据的有效性和完整性

    外键的删除:
        alter table 表名 drop foreign key 外键约束的名称

    内连接: ( 只查询两个表都能够互相找到的数据 )
      隐式内连接:  select * from A , B where 主表的主键=从表的外键
      显示内连接:  select * from A表 inner join B表 on 主表的主键=从表的外键

    外连接: 以一张表为主 匹配另一张表数据 如果匹配成功展示 如果匹配不成功 显示为null
     左外连接: select * from A表  left join B表 on 主表的主键=从表的外键
     右外连接: select * from A表  right join B表 on 主表的主键=从表的外键
     表的顺序 需要注意: 只需要会一个即可 ,调整表的顺序即可

    select * from A表 [inner] join B表 on 主表的主键=从表的外键
    select * from A表  left [outer] join B表 on 主表的主键=从表的外键
    select * from A表 right [outer] join B表 on 主表的主键=从表的外键

子查询
    #将一个表查询的结果 作为另一个查询语句的特殊形式存在(字段, 表 , 或者 条件)


TCL事物
    1.事物的最大特点:
        多个逻辑操作单元,要么同时成功,要么同时失效

    2.自动事物:每一次操作,回车后会自动更新到数据库,一行一事物
        set autocommit=0; 关闭自动提交事务
        commit:表示提交 rollback:回滚

    3.手动事物:如果需要事物,手动开启一次性事物
        start transaction 开启事物
        commit:提交事务,当前事物都会结束,一次性事务关闭
        rollback:回滚事物,当前事物都会结束,一次性事务关闭
        操作事务,必须在同一窗口,证明在同一事务下

    4.事务的存储特点
        在整个事物的过程中,进行存档
        savepoint:存储点名称
        rollback to :存储点名称; 不结束事物
        rollback:结束整个事物

    5.事务的特性(面试)
    ACID
    a:原子性,一组逻辑操作不可分割
    c:一致性,事物的前后,操作应该保持一致,要么同时成功,要么同时失败,数据必须一致
    i:隔离性,事务和事务之间应该独立存在,不能相互影响
    d:持久性,数据不可逆,事务只要提交了,不可再回滚了

    6.隔离级别(面试)
    显示生活中的数据 允许存在一定的误差 28原则
    隔离级别:面对隔离性,提供一些解决方案

    问题:
    脏读问题:一个事务读到了另一个事务没有提交的数据
    不可重复读问题:一个事务读到了另一个事务已经提交的数据 update
    虚读/幻读问题:一个事务读到了另一个事务已经提交的数据 insert

    隔离级别解决方案
    读未提交:不解决任何问题 read uncommitted
    读已提交:解决脏读问题 read committed
    可重复读:解决脏读和不可重复问题, repeatable read

    串行化:解决所有问题, serializable 单线程
    28原则:允许存在一定的误差
